{"version":3,"sources":["components/Card.js","components/CardList.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","path","react_default","a","createElement","Container","styled","div","_templateObject","CardList","repos","CardList_Container","undefined","map","repo","components_Card","key","id","url","CardList_templateObject","App","state","_this2","this","fetch","method","body","JSON","stringify","query","headers","Content-Type","Authorization","then","res","status","Error","json","resData","setState","gitHub","data","viewer","repositories","nodes","catch","err","console","log","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ipBAGA,IASeA,EATF,SAAAC,GAAoB,IAAjBC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,KACpB,OACEC,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,KAOJI,EAAYC,IAAOC,IAAVC,wOCTf,IAYeC,EAZE,SAAAV,GAAe,IAAZW,EAAYX,EAAZW,MAClB,OACER,EAAAC,EAAAC,cAACO,EAAD,UACaC,IAAVF,EACG,GACAA,EAAMG,IAAI,SAAAC,GAAI,OACZZ,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKF,EAAKG,GAAIjB,KAAMc,EAAKd,KAAMC,KAAMa,EAAKI,UAQtDb,EAAYC,IAAOC,IAAVY,KCqCAC,6MAnDbC,MAAQ,sFACY,IAAAC,EAAAC,KAgBlBC,MAAM,iCAAkC,CACtCC,OAAQ,OACRC,KAAMC,KAAKC,UAjBK,CAChBC,MAAK,yOAiBLC,QAAS,CACPC,eAAgB,mBAChBC,cAAe,qDAGhBC,KAAK,SAAAC,GACJ,GAAmB,MAAfA,EAAIC,QAAiC,MAAfD,EAAIC,OAC5B,MAAM,IAAIC,MAAM,WAElB,OAAOF,EAAIG,SAEZJ,KAAK,SAAAK,GACJhB,EAAKiB,SAAS,CACZC,OAAQF,EAAQG,KAAKC,OAAOC,aAAaC,UAG5CC,MAAM,SAAAC,GACL,MAAMA,qCAMV,OADAC,QAAQC,IAAIzB,KAAKF,MAAMmB,QAErBtC,EAAAC,EAAAC,cAAA,WACGmB,KAAKF,QAAU,GAAKnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAUvC,MAAOa,KAAKF,MAAMmB,SAAa,WA9CpDU,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.f864aac9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Card = ({ name, path }) => {\r\n  return (\r\n    <Container>\r\n      <h1>{name}</h1>\r\n      <p>{path}</p>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n\r\nconst Container = styled.div`\r\n  background-color: #42275a;\r\n  color: #ccc;\r\n  border-radius: 5px;\r\n  border: 3px light #d3cce3;\r\n  box-shadow: 2px 4px 6px #d3cce3;\r\n  padding: 1em;\r\n  margin: 1em;\r\n  overflow-wrap: break-word;\r\n  transition: 500ms linear;\r\n\r\n  h2,\r\n  p {\r\n    text-align: center;\r\n    margin: auto;\r\n  }\r\n  :hover {\r\n    transform: scale(1.1);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ repos }) => {\r\n  return (\r\n    <Container>\r\n      {repos === undefined\r\n        ? \"\"\r\n        : repos.map(repo => (\r\n            <Card key={repo.id} name={repo.name} path={repo.url} />\r\n          ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  grid-template-rows: repeat(3, minmax(300px, 1fr));\r\n  grid-gap: 10px;\r\n`;\r\n","import React, { Component } from \"react\";\r\n\r\nimport CardList from \"./components/CardList\";\r\n\r\nclass App extends Component {\r\n  state = {};\r\n  componentDidMount() {\r\n    let requestBody = {\r\n      query: `query {\r\n        viewer {\r\n          name\r\n          location\r\n           repositories(last:10) {\r\n             nodes {\r\n               name\r\n              id\r\n              url\r\n             }\r\n           }\r\n         }\r\n      }`\r\n    };\r\n    fetch(\"https://api.github.com/graphql\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer 3b1cd049662945ecb46ea8c020e75b42cd111c9d\"\r\n      }\r\n    })\r\n      .then(res => {\r\n        if (res.status !== 200 && res.status !== 201) {\r\n          throw new Error(\"Failed!\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(resData => {\r\n        this.setState({\r\n          gitHub: resData.data.viewer.repositories.nodes\r\n        });\r\n      })\r\n      .catch(err => {\r\n        throw err;\r\n      });\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.gitHub);\r\n    return (\r\n      <div>\r\n        {this.state !== {} ? <CardList repos={this.state.gitHub} /> : \"\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}